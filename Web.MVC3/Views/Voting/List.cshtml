@model IEnumerable<Data.ViewModels.Voting.VotingIndexItemModel>
@using Data.Enums
@using Framework.Lists
@using Framework.Mvc.Strings
@using Globalization
@using Globalization.Resources.Voting
@using Framework.Strings
@using Web.Helpers;
@if (Model.Count() == 0)
{
    @Resource.NoIssues
}
else
{
    foreach (var issue in Model.AsStyleableList())
    {
        <li class="issue @issue.GetCssClass("issue_")">
            <h3>@Html.ActionLinkWithReturnUrl(issue.Item.Subject.HtmlDecode(), MVC.Voting.Details(issue.Item.Id, issue.Item.Subject.ToSeoUrl()))</h3>
            <div data-role="unique-voting" class="inline_voting">
                    @if(issue.Item.VoteButtonVisible)
                    {
                        <div data-role="votebutton">
                            @Html.Buttons(new List<ButtonHelperModel>()
                            {
                                new ButtonHelperModel()
                                    {
                                        Href = Url.Action(MVC.Voting.VoteFor(issue.Item.Id)),
                                        Type = ButtonHelperModel.Types.Link,
                                        CssClass	= "VoteButton button_voting",
                                        Text = Resource.For,
                                        ImageUrl = Links.Content.Images.thumb_up_png,
                                        HtmlAttributes = new Dictionary<string, object> { { "data-id", issue.Item.Id }, { "data-private", issue.Item.IsPrivate ? "true" : "false" }, { "data-role", "vote" } }
                                    },
                                new ButtonHelperModel()
                                    {
                                        Href = Url.Action(MVC.Voting.VoteAgainst(issue.Item.Id)),
                                        Type = ButtonHelperModel.Types.Link,
                                        CssClass	= "VoteButton button_voting",
                                        Text = Resource.Against,
                                        ImageUrl = Links.Content.Images.thumb_down_png,
                                        HtmlAttributes = new Dictionary<string, object> { { "data-id", issue.Item.Id }, { "data-private", issue.Item.IsPrivate ? "true" : "false" }, { "data-role", "vote" } }
                                    }
                            })
                        </div>
                    }
                    <div data-role="progressbar" class="@Html.GetVisibilityClassString(!issue.Item.VoteButtonVisible) fr" style="width:150px;">
                            @Html.Partial(MVC.Voting.Views.Progress, issue.Item.Progress)
                    </div>
            </div>
            <div class="clear"></div>
            <div class="categories">
                <p class="m_list_d">
                    @foreach (var category in issue.Item.Categories)
                    {
                        <span class="ctag" data-id="@category.Value">@category.Text</span>
                    }
                    @if (!string.IsNullOrEmpty(issue.Item.Municipality))
                    {
                        <span class="ctag">@issue.Item.Municipality</span>
                    }
                </p>
            </div>
            <div class="details">
                <span title="@issue.Item.Deadline">
                    @if (issue.Item.Deadline.HasValue)
                    {
                        <span>
                            @string.Format(Resource.TimeLeft, issue.Item.TimeLeft)
                        </span>
                    }
                </span> 
                <span>@GlobalizedSentences.GetVotesCountString(issue.Item.VotesCount)</span>
                <span>@GlobalizedSentences.GetCommentsCountString(issue.Item.CommentsCount)</span>
                <span class="last">@GlobalizedSentences.GetViewsCountString(issue.Item.ViewsCount)</span>
            </div>
            <div class="clear"></div>
        </li>
    }
}